type User {
	id: ID!
	email: String
	fullName: String
	username: String
	password: String
	permissions: [Permission]
	active: Boolean
	createdAt: String
	updatedAt: String
}

type TokenResponse {
	token: String!
}

input UserInput {
	email: String
	fullName: String
	username: String!
	password: String!
	confirmPassword: String!
}


input UserPermissionInput {
	userId: ID!
	permissionIds: [ID!]!
}

input AuthInput {
	username: String!
	password: String!
}

extend type Query  {
	getAllUsers: [User]
	getUser(id: ID!): User
}

extend type Mutation {
	createUser(input: UserInput): User
	authUser(input: AuthInput!): TokenResponse
	assignPermissions(input: UserPermissionInput!): [Permission]
	activateUser(userId: ID!): User
	blockUser(userId: ID!): User
}